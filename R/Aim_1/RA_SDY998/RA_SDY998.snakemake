rule all:
    input:
        "cellTypist/*.csv",
        "pbmc.female.RDS",
        "pbmc.male.RDS",
        "psuedobulk/*.edgeR-LRT.txt",
        "ORA/ora.*.Rdata",
        "cpdb/analysis/*.txt",
        "exp.matrix/*.RDS",
        "exp.matrix/metrics/logit_metrics_*.csv",
        "exp.matrix/AUROC/logit_*.pdf",
        "exp.matrix/metrics/logit_confusion_*.csv",
        "ML.models/logit_model_*.sav",
        "exp.matrix/metrics/RF_metrics_*.csv",
        "exp.matrix/AUROC/RF_*.pdf",
        "exp.matrix/metrics/RF_confusion_*.csv",
        "ML.models/RF_model_*.sav",
        "exp.matrix/metrics/SVM_metrics_*.csv",
        "exp.matrix/AUROC/SVM_*.pdf",
        "exp.matrix/metrics/SVM_confusion_*.csv",
        "ML.models/SVM_model_*.sav",
        "exp.matrix/metrics/GBM_metrics_*.csv",
        "exp.matrix/AUROC/GBM_*.pdf",
        "exp.matrix/metrics/GBM_confusion_*.csv",
        "ML.models/GBM_model_*.sav"
        
rule preprocessing:
    output:
        "ddqc.plot.pdf",
        "seurat.clusters.DimPlot.pdf",
        "FindAllMarkers.txt",
        "pbmc.h5Seurat",
        "pbmc.h5ad",
        "raw.counts.csv",
        "pbmc.unlabelled.RDS"
    log:
        "logs/do_preprocessing.log"
    conda:
        "Aim_1"
    shell:
        "Rscript /directflow/SCCGGroupShare/projects/lacgra/R/Aim_1/RA_SDY998/preprocessing.R"

rule celltypist:
    input:
        "raw.counts.csv"
    output:
        "cellTypist/*.csv"
    log:
        "logs/celltypist.log"
    conda:
        "Aim_1"
    shell:
        "mkdir -p cellTypist; celltypist --indata {input} --model Immune_All_Low.pkl --transpose-input --mode best_match --majority-voting --plot-results --outdir cellTypist"

rule assign_celltypes_sex:
    input:
        "pbmc.unlabelled.RDS",
        "cellTypist/predicted_labels.csv"
    output:
        "DimPlot.cellTypist.all.pdf",
        "sex.dendrogram.pdf",
        "pbmc.RDS",
        "DimPlot.female.pdf",
        "pbmc.female.RDS",
        "cell.count.txt",
        "DimPlot.male.pdf",
        "pbmc.male.RDS"
    log:
        "logs/assign_celltypes_sex.log"
    conda:
        "Aim_1"
    shell:
        "Rscript /directflow/SCCGGroupShare/projects/lacgra/R/Aim_1/RA_SDY998/assign_celltypes_sex.R"

rule differential_expression:
    input:
        "pbmc.female.RDS"
    output:
        "psuedobulk/*.edgeR-LRT.txt"
    log:
        "logs/differential_expression.log"
    conda:
        "Aim_1"
    shell:
        "Rscript /directflow/SCCGGroupShare/projects/lacgra/PhD/R/Aim_1/RA_SDY998/differential.expression.R"

rule gene_set_enrichment:
    input:
        "psuedobulk/*.edgeR-LRT.txt"
    output:
        "ORA/ora.*.Rdata"
    log:
        "logs/gene_set_enrichment.log"
    conda:
        "Aim_1"
    shell:
        "Rscript /directflow/SCCGGroupShare/projects/lacgra/PhD/R/Aim_1/RA_SDY998/gene.set.enrichment.R"

rule prep_cellphonedb:
    input:
        "pbmc.female.RDS"
    output:
        "cpdb/meta.tsv",
        "cpdb/pbmc.h5ad"
    log:
        "logs/prep_cellphonedb.log"
    conda:
        "Aim_1"
    shell:
        "Rscript /directflow/SCCGGroupShare/projects/lacgra/PhD/functions/cpdb.files.R RA_SDY998"

rule cellphonedb:
    input:
        "cpdb/meta.tsv",
        "cpdb/pbmc.h5ad"
    output:
        "cpdb/analysis/*.txt"
    log:
        "logs/cellphonedb.log"
    conda:
        "cellphonedb"
    shell:
        "cellphonedb method statistical_analysis {input} --output-path cpdb --threshold 0.1 --counts-data hgnc_symbol --project-name analysis"

rule export_exp_matrix:
    input:
        "pbmc.female.RDS"
    output:
        "exp.matrix/*.RDS"
    log:
        "logs/export_exp_matrix.log"
    conda:
        "Aim_3"
    shell:
        "Rscript /directflow/SCCGGroupShare/projects/lacgra/PhD/Python/Aim_3/export_exp.matrix.R pbmc.female.RDS"

rule logit_classification:
    input:
        "exp.matrix/*.RDS"
    output:
        "exp.matrix/metrics/logit_metrics_*.csv",
        "exp.matrix/AUROC/logit_*.pdf",
        "exp.matrix/metrics/logit_confusion_*.csv",
        "ML.models/logit_model_*.sav"
    log:
        "logs/logit.classification.log"
    conda:
        "Aim_3"
    shell:
        "python3 /directflow/SCCGGroupShare/projects/lacgra/PhD/Python/Aim_3/logit.classification.py {input}"

rule RF_classification:
    input:
        "exp.matrix/*.RDS"
    output:
        "exp.matrix/metrics/RF_metrics_*.csv",
        "exp.matrix/AUROC/RF_*.pdf",
        "exp.matrix/metrics/RF_confusion_*.csv",
        "ML.models/RF_model_*.sav"
    log:
        "logs/RF.classification.log"
    conda:
        "Aim_3"
    shell:
        "python3 /directflow/SCCGGroupShare/projects/lacgra/PhD/Python/Aim_3/random.forest.py {input}"

rule SVM_classification:
    input:
        "exp.matrix/*.RDS"
    output:
        "exp.matrix/metrics/SVM_metrics_*.csv",
        "exp.matrix/AUROC/SVM_*.pdf",
        "exp.matrix/metrics/SVM_confusion_*.csv",
        "ML.models/SVM_model_*.sav"
    log:
        "logs/SVM.classification.log"
    conda:
        "Aim_3"
    shell:
        "python3 /directflow/SCCGGroupShare/projects/lacgra/PhD/Python/Aim_3/support.vector.machine.py {input}"

rule GBM_classification:
    input:
        "exp.matrix/*.RDS"
    output:
        "exp.matrix/metrics/GBM_metrics_*.csv",
        "exp.matrix/AUROC/GBM_*.pdf,
        "exp.matrix/metrics/GBM_confusion_*.csv",
        "ML.models/GBM_model_*.sav"
    log:
        "logs/GBM.classification.log"
    conda:
        "Aim_3"
    shell:
        "python3 /directflow/SCCGGroupShare/projects/lacgra/PhD/Python/Aim_3/gradient.boosting.machine.py {input}"